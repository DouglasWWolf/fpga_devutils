#==============================================================================
# This looks up the Vivado version number that was used to create the project
# and ensures that the same version is used to process it here
#==============================================================================
get_vivado()
{
   version=
   grep 2024.2 $1 >/dev/null && version=2024.2
   grep 2021.1 $1 >/dev/null && version=2021.1
   if [ -z $version ]; then
       echo "Unable to determine Vivado version for $project"
       exit 1
   fi
   new=$(echo $VIVADO | sed "s/Vivado\/20[0-9][0-9]\.[0-9]/Vivado\/${version}/g")

   # Extract the first token of $VIVADO and display it
   read new _ <<<$new
   echo $new
}
#==========================================================================

#==========================================================================
# Displays the git-hash of the most recent commit
#==========================================================================
get_commit_hash()
{
    # Display the hash of the latest comment
    git log -1 --pretty=format:"%H" 
}
#==========================================================================

#==================================================================
# This function will find "git_hash.vh" in the current directory
# tree, and silently update it to contain the git-hash of the
# most recent commit, formatted as a Verilog "localparam".
#
# This function will not affect the "last-modified" date of the
# "git_hash.vh" file, so the Vivado IPI won't erroneously complain
# that we have updated a module.
#
# Function options:
#  --dir <working_directory_name>
#  --hash <string_of_hex>
#
# Doug Wolf wrote this
#==================================================================
update_githash_file()
{
    # We don't know what our hash is yet
    local hash=
    
    # We don't have a fully qualified path to our updateable file yet
    local fqp=

    # This is the basename of the file we're going to update
    local ofile=git_hash

    # Sit in a loop and parse the command line options
    while [ ! -z $1 ]; do

        # Did the caller hand us a hash on the command line?
        if [ "$1" == "--hash" ]; then
            hash=$2
            shift
            shift
            continue
        fi

        # Did the caller hand us a directory name on the command line?
        if [ "$1" == "--dir" ]; then
            local dir=$2
            if [ -z $dir ] || [ ! -d $dir ]; then 
                echo "$dir not found!" 1>&2
                return 3
            fi
            cd $dir
            shift
            shift
            continue
        fi

        # If we get here, the caller screwed up
        echo "Unknown option $1" 1>&2
        return 4

    done


    # If the current directory isn't a git repo, complain and quit
    if [ ! -d .git ]; then
        echo "$PWD is not a git repo!" 1>&2
        return 1
    fi

    # If the hash-file doesn't exist in the current directory, find it
    if [ -f ${ofile}.vh ]; then
        fqp=${ofile}.vh
    else
        fqp=$(find . | grep "/${ofile}\.vh$")
    fi

    # If we couldn't find a hash-file, complain
    if [ -z $fqp ]; then
        echo "${ofile}.vh not found under $PWD !" 1>&2
        return 2
    fi

    # If the caller didn't hand us a hash, find the git-hash of
    # the most recent commit
    if [ -z $hash ]; then
        hash=$(git log -1 --pretty=format:"%H")
    fi

    # This is the name of the temp file we'll create
    temp_file=new_hash.vh

    # Create a verilog header file with the git-hash
    echo "//"                                                 >$temp_file
    echo "// -- DO NOT EDIT! -- this file is auto-generated" >>$temp_file
    echo "//"                                                >>$temp_file
    echo "localparam[159:0] GIT_HASH = 160'h${hash};"        >>$temp_file

    # Copy our new hashfile into the project source, but *without* updating
    # the "last modified time" or any other meta-data.   This will prevent
    # Vivado from erroneously thinking that we've updated a module.
    cp -p $temp_file $fqp

    # And we don't need our temporary output file anymore
    rm -rf $temp_file
}
#==================================================================

#==================================================================
# This function will find "timestamp.vh" in the current directory
# tree, and silently update it to contain the specified (or current)
# date and time
#
# This function will not affect the "last-modified" date of the
# "timestamp.vh" file, so the Vivado IPI won't erroneously complain
# that we have updated a module.
#
# Function options:
#  --dir <working_directory_name>
#
# Doug Wolf wrote this
#==================================================================
update_timestamp_file()
{
    # We don't have a timestamp yet
    local timestamp

    # We don't have a fully qualified path to our updateable file yet
    local fqp=

    # This is the basename of the file we're going to update
    local ofile=timestamp

    # Sit in a loop and parse the command line options
    while [ ! -z $1 ]; do

        # Did the caller hand us a directory name on the command line?
        if [ "$1" == "--dir" ]; then
            local dir=$2
            if [ -z $dir ] || [ ! -d $dir ]; then 
                echo "$dir not found!" 1>&2
                return 3
            fi
            cd $dir
            shift
            shift
            continue
        fi

        # If this option begins with --, the caller screwed up
        if [ $(echo $1 | cut -c1-2) == "--" ]; then
            echo "Unknown option $1" 1>&2
            return 4
        fi

        # Fetch the timestamp the caller handed us
        local timestamp=$1
        break;
    done

    # If the caller didn't hand us a timestamp, create one
    test -z $timestamp && timestamp=$(date +"%Y%m%d_%H%M%S")

    # Disassemble the timestamp into components
     year=$(echo $timestamp | cut -c1-4)
    month=$(echo $timestamp | cut -c5-6)
      day=$(echo $timestamp | cut -c7-8)
     hour=$(echo $timestamp | cut -c10-11)
      min=$(echo $timestamp | cut -c12-13)
      sec=$(echo $timestamp | cut -c14-15)

    # If the timestamp-file doesn't exist in the current directory, find it
    if [ -f ${ofile}.vh ]; then
        fqp=${ofile}.vh
    else
        fqp=$(find . | grep "/${ofile}\.vh$")
    fi

    # If we couldn't find a timestamp-file, complain
    if [ -z $fqp ]; then
        echo "${ofile}.vh not found under $PWD !" 1>&2
        return 2
    fi

    # This is the name of the temporary file we're going to create
    temp_file=new_ts.vh

    # Create a human readable version of the timestamp
    hr="$month/$day/$year $hour:$min:$sec"

    # Create a verilog header file with the timestamp
    echo "//"                                                              >$temp_file
    echo "// -- DO NOT EDIT! -- this file is auto-generated"              >>$temp_file
    echo "//"                                                             >>$temp_file
    echo "// $hr"                                                         >>$temp_file
    echo "//"                                                             >>$temp_file
    echo "localparam BUILD_DATE = ($month << 24) | ($day << 16) | $year;" >>$temp_file
    echo "localparam BUILD_TIME = ($hour << 16) | ($min << 8) | $sec;"    >>$temp_file

    # Copy our new timestamp into the project source, but *without* updating
    # the "last modified time" or any other meta-data.   This will prevent
    # Vivado from erroneously thinking that we've updated a module.
    cp -p $temp_file $fqp

    # And we don't need our temporary output file anymore
    rm -rf $temp_file
}
#==================================================================



#==================================================================
# This function removes every .log it finds
#==================================================================
remove_logs()
{
    find . | grep "\.log$" >log_list
    while IFS= read line; do
        rm -rf $line
    done < log_list
    rm log_list
}
#==================================================================

      
#==================================================================
# Create the Vivado TCL build script
#
# $1 = The name of the project file
#==================================================================
create_build_script()
{
    local project_file=$1
    cat <<EOT
    open_project $(realpath $project_file)
    reset_project
    update_compile_order -fileset sources_1
    set_param general.maxThreads 32
    launch_runs impl_1 -to_step write_bitstream -jobs 32
EOT
}
#==================================================================


#==================================================================
# This displays each log file as they come into existence
#
# When this script returns, the file "build.result" will hold the
# string "pass" or "fail"
#==================================================================
show_logs()
{
    rm -rf build.result
    echo >logs_completed
    while true; do
        
        # Generate a list of "runme.log" log files
        echo vivado.log              >log_list
        find . | grep "runme\.log$" >>log_list

        # Read the list, one line at a time
        while IFS= read logfile; do

            # If we've already read this logfile, skip it
            grep -q $logfile logs_completed && continue
            
            # Monitor this log file
            while true; do
                sleep 1
                cat $logfile
                grep -q "Exiting Vivado" $logfile
                test $? -eq 0 && break
            done
          
            # Record the fact that we've already read this logfile
            echo $logfile >>logs_completed
            
            # Does this logfile indicate a failure?
            grep "ERROR:" $logfile
            
            # If it does, record the result.  We're done
            if [ $? -eq 0 ]; then
                echo fail >build.result
                return 1
            fi
            
            # If this logfile is the implementation logfile, we're done
            echo $logfile | grep -q "impl_1/runme.log$"
            if [ $? -eq 0 ]; then
                echo pass >build.result
                return 0
            fi

        done < log_list

        # Wait a moment for new logfiles to come into existence
        sleep 5
    done
}
#==================================================================

#==================================================================
# This displays the folder where the build artifacts will be stored
#
# This function expect a YYYYMMDD_HHMMSS timestamp to be passed in
#==================================================================
get_artifact_folder()
{  
    # Fetch the timestamp from the command line
    local timestamp=$1

    # If there is a 2nd option in the command line, it's project name
    local project_name=$2
    test -z "$project_name" && project_name=$(basename $PWD)

    # Fetch the short hash of the most recent git commit
    local hash=$(get_commit_hash | cut -c1-8)

    # And display the directory where our build artifacts will go
    echo $VIVADO_BUILD_FOLDER/${project_name}/${timestamp}_${hash}
}
#==================================================================


#==================================================================
# This function locates "revision_history.vh" and parses it to
# produce a string that looks like <major>.<minor>.<build>
#
# Here, <build> is horribly named.  It's really just the 3rd part
# of the "x.y.z" version string.  We should track down the guy that
# named it "build" and tell him that he's no longer allowed to name
# things!
#==================================================================
parse_revision_history_vh()
{
    # Find the revision file
    filename=$(find . | grep revision_history.vh)
    if [ -z $filename ]; then
        echo "revision_history.vh not found beneath $PWD" 1>&2
        return 1
    fi

    # Fetch the three components
    major=$(grep VERSION_MAJOR $filename 2>/dev/null)
    minor=$(grep VERSION_MINOR $filename 2>/dev/null)
    build=$(grep VERSION_BUILD $filename 2>/dev/null)

    # Extract the part of the line after the "="
    major="${major#*=}"
    minor="${minor#*=}"
    build="${build#*=}"

    # Throw away semicolons, spaces, and tabs
    major=$(echo $major | sed 's/;//' | sed 's/ //' | sed 's/\t//')
    minor=$(echo $minor | sed 's/;//' | sed 's/ //' | sed 's/\t//')
    build=$(echo $build | sed 's/;//' | sed 's/ //' | sed 's/\t//')

    # Ensure that all three components exist
    if [ -z "$major" ] || [ -z "$minor" ] || [ -z "$build" ]; then
        echo "Malformed $(realpath $filename)" 1>&2
        return 1
    fi

    # Display the revision string
    echo ${major}.${minor}.${build}
}
#==================================================================


#==================================================================
# This copies the build artifacts to the artifact folder
#==================================================================
copy_build_artifacts()
{
    # Find the name of the artifact folder
    dest=$1

    # If there is a 2nd parameter, its the project name
    local project_name=$2
    test -z "$project_name" && project_name=$(basename $PWD)

    # Create the folder for the artifacts
    mkdir -p $dest

    # Determine which of our three build artifacts exist
    bitfile=$(find ${project}.runs/impl_1 | grep  "\.bit$")
    binfile=$(find ${project}.runs/impl_1 | grep  "\.bin$")
    ltxfile=$(find ${project}.runs/impl_1 | grep  "\.ltx$")

    # Copy each build artifact to the destination directory
    test -z $bitfile || cp $bitfile $dest/${project_name}.bit
    test -z $binfile || cp $binfile $dest/${project_name}.bin
    test -z $ltxfile || cp $ltxfile $dest/${project_name}.ltx

    # If fpga_regs.h exists, copy it to the destination directory
    test -f fpga_regs.h && cp fpga_regs.h $dest/git_hash

    # Create an artifact file that contains the git hash
    echo $(get_commit_hash) > $dest/git_hash

    # Create an artifact file containing the x.y.z version 
    version=$(parse_revision_history_vh)
    echo $version > $dest/version
}
#==================================================================

# If this is 0, the actual build will be skipped
perform_build=1

# Parse the command line
while [ ! -z "$1" ]; do

    if [ "$1" == "-no-build" ] || [ "$1" == "--no-build" ]; then
        perform_build=0
        shift
        continue
    fi

    echo "bad command option: $1" 1>&2
    exit 1

done

# Determine the name of the Vivado project file
project_file=$(ls *.xpr 2>/dev/null)

# Does the project file exist?
if [ -z "$project_file" ]; then
   echo "Not a Vivado project: $PWD"
   exit 1
fi

# Make sure this is a git repo
if [ ! -d .git ]; then
    echo "Not a git repo: $PWD" 1>&2
    exit 1
fi

# Make sure there's not already a build going for this project
output=$(ps aux | grep Vivado | grep $PWD)
if [ ! -z "$output" ]; then
    echo "There is already a build going for $PWD" 1>&2
    exit 1
fi

# Make sure that $VIVADO_BUILD_FOLDER is defined
if [ -z $VIVADO_BUILD_FOLDER ]; then
    echo "\$VIVADO_BUILD_FOLDER not defined!" 1>&2
    exit 1
fi

# If there is a pre-build step, run it.  If it exits with a 
# non-zero exit-code, we don't run the build.
pre_build="./pre_build.sh"
if [ -f $pre_build ]; then
    echo "Pre-build step starting..."
    chmod +x $pre_build
    $pre_build
    test $? -ne 0 && exit
    echo "Pre-build step complete"    
fi

# Create the build script for this project
create_build_script $project_file >vivado_build.tcl

# Determine the executable path to the correct version of Vivado
VIVADO=$(get_vivado $project_file)

# Get the base name of the project (without file extension)
project="${project_file%.*}"

# This timestamp will be used to name the build artifact folder
# and will also be written into the bitstream file
timestamp=$(date +"%Y%m%d_%H%M%S")

# Make sure that git_hash.vh contains the hash from the current commit
update_githash_file

# Update the source file that contains the build-timestamp
update_timestamp_file $timestamp

# Fetch the name of the folder where our build artifacts will be stored
artifact_folder=$(get_artifact_folder $timestamp)

# If we need to perform the actual build, make it so
if [ $perform_build -eq 1 ]; then

    # Clean up existing Vivado log/journal cruft
    rm -rf vivado*\.log vivado*\.jou

    # Get rid of all the end products of any previous build
    rm -rf ${project}.runs/impl_1/*

    # Make sure the log files don't exist
    remove_logs

    # Kick off Vivado, which will run in the background
    $VIVADO -mode batch -source vivado_build.tcl
fi

# Show the output of the logfiles in real-time
show_logs

# Wait for Vivado to call it quits for this job
echo "Waiting for Vivado to exit..."
while true; do
   output=$(ps aux | grep Vivado | grep $PWD)
   test -z "$output" && break
   sleep 2
done


# If the build failed, we're done
if [ $(cat build.result) == "fail" ]; then
    exit 1
fi

#------------------------------------------
# If we get here, the build was successful
#------------------------------------------
if [ -f make_fpga_regs ]; then
    chmod +x make_fpga_regs
    ./make_fpga_regs
fi

# Copy the build artifacts
copy_build_artifacts $artifact_folder

# If there is a post-build step, run it
post_build="./post_build.sh"
if [ -f $post_build ]; then
    echo "Post-build step starting..."
    chmod +x $post_build
    $post_build $artifact_folder
    echo "Post-build step complete"
fi
