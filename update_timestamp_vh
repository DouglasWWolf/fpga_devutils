#==================================================================
# This function will find "timestamp.vh" in the current directory
# tree, and silently update it to contain the specified (or current)
# date and time
#
# This function will not affect the "last-modified" date of the
# "timestamp.vh" file, so the Vivado IPI won't erroneously complain
# that we have updated a module.
#
# Function options:
#  --dir <working_directory_name>
#
# Doug Wolf wrote this
#==================================================================
update_timestamp_file()
{
    # We don't have a timestamp yet
    local timestamp

    # We don't have a fully qualified path to our updateable file yet
    local fqp=

    # This is the basename of the file we're going to update
    local ofile=timestamp

    # Sit in a loop and parse the command line options
    while [ ! -z $1 ]; do

        # Did the caller hand us a directory name on the command line?
        if [ "$1" == "--dir" ]; then
            local dir=$2
            if [ -z $dir ] || [ ! -d $dir ]; then 
                echo "$dir not found!" 1>&2
                return 3
            fi
            cd $dir
            shift
            shift
            continue
        fi

        # If this option begins with --, the caller screwed up
        if [ $(echo $1 | cut -c1-2) == "--" ]; then
            echo "Unknown option $1" 1>&2
            return 4
        fi

        # Fetch the timestamp the caller handed us
        timestamp=$1
        break;
    done

    # If the caller didn't hand us a timestamp, create one
    test -z $timestamp && timestamp=$(date +"%Y%m%d_%H%M%S")

    # Disassemble the timestamp into components
     year=$(echo $timestamp | cut -c1-4)
    month=$(echo $timestamp | cut -c5-6)
      day=$(echo $timestamp | cut -c7-8)
     hour=$(echo $timestamp | cut -c10-11)
      min=$(echo $timestamp | cut -c12-13)
      sec=$(echo $timestamp | cut -c14-15)

    # If the timestamp-file doesn't exist in the current directory, find it
    if [ -f ${ofile}.vh ]; then
        fqp=${ofile}.vh
    else
        fqp=$(find . | grep "/${ofile}\.vh$")
    fi

    # If we couldn't find a timestamp-file, complain
    if [ -z $fqp ]; then
        echo "${ofile}.vh not found under $PWD !" 1>&2
        return 2
    fi

    # This is the name of the temporary file we're going to create
    temp_file=new_ts.vh

    # Create a human readable version of the timestamp
    hr="$month/$day/$year $hour:$min:$sec"

    # Create a verilog header file with the timestamp
    echo "//"                                                              >$temp_file
    echo "// -- DO NOT EDIT! -- this file is auto-generated"              >>$temp_file
    echo "//"                                                             >>$temp_file
    echo "// $hr"                                                         >>$temp_file
    echo "//"                                                             >>$temp_file
    echo "localparam BUILD_DATE = ($day << 24) | ($month << 16) | $year;" >>$temp_file
    echo "localparam BUILD_TIME = ($hour << 16) | ($min << 8) | $sec;"    >>$temp_file


    # Copy our new timestamp into the project source, but *without* updating
    # the "last modified time" or any other meta-data.   This will prevent
    # Vivado from erroneously thinking that we've updated a module.
    cp -p $temp_file $fqp

    # And we don't need our temporary output file anymore
    rm -rf $temp_file
}
#==================================================================

update_timestamp_file $1 $2 $3 $4 $5 $6 $7 $8 $9


